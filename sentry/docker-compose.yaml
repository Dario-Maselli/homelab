services:
  # ---------- Kafka in KRaft mode (no Zookeeper) ----------
  kafka:
    image: bitnami/kafka:latest
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "/opt/bitnami/kafka/bin/kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 30s
    volumes:
      - kafka:/bitnami/kafka

  # ---------- Redis ----------
  redis:
    image: redis:latest
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - redis:/data

  # ---------- Postgres with wal2json ----------
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
      args:
        PG_MAJOR: "17"   # change only when you want to upgrade
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    # enable logical decoding and give Sentry some headroom
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=10"
      - "-c"
      - "max_replication_slots=10"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=512MB"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 20
    volumes:
      - postgres:/var/lib/postgresql/data

  # ---------- ClickHouse for Snuba ----------
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: snuba
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --query='SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 30
    volumes:
      - clickhouse:/var/lib/clickhouse

  # ---------- Snuba ----------
  snuba-api:
    image: getsentry/snuba:latest
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    command: ["api"]
    environment:
      SNUBA_SETTINGS: docker
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: "9000"
      REDIS_HOST: redis
      KAFKA_BROKERS: kafka:9092
      CLICKHOUSE_USER: snuba
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:1218/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  snuba-consumer:
    image: getsentry/snuba:latest
    depends_on:
      snuba-api:
        condition: service_healthy
    command: ["consumer", "--storage", "events", "--auto-offset-reset=latest"]
    environment:
      SNUBA_SETTINGS: docker
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: "9000" 
      REDIS_HOST: redis
      KAFKA_BROKERS: kafka:9092
      CLICKHOUSE_USER: snuba
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}

  snuba-transactions:
    image: getsentry/snuba:latest
    depends_on:
      snuba-api:
        condition: service_healthy
    command: ["consumer", "--storage", "transactions", "--auto-offset-reset=latest"]
    environment:
      SNUBA_SETTINGS: docker
      CLICKHOUSE_HOST: clickhouse
      REDIS_HOST: redis
      KAFKA_BROKERS: kafka:9092
      CLICKHOUSE_PORT: "9000"
      CLICKHOUSE_USER: snuba
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}

  snuba-replacer:
    image: getsentry/snuba:latest
    depends_on:
      snuba-api:
        condition: service_healthy
    command: ["replacer", "--storage", "events"]
    environment:
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: "9000"
      REDIS_HOST: redis
      KAFKA_BROKERS: kafka:9092
      CLICKHOUSE_USER: snuba
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      SNUBA_SETTINGS: docker

  # ---------- Symbolicator ----------
  symbolicator:
    image: getsentry/symbolicator:latest
    environment:
      RUST_LOG: actix_web=info,symbolicator=info
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:3021/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 20
    volumes:
      - symbolicator:/data

  # ---------- One shot: migrations ----------
  sentry-upgrade:
    image: getsentry/sentry:latest
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      snuba-api:
        condition: service_healthy
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_POSTGRES_PORT: "5432"
      SENTRY_DB_USER: ${POSTGRES_USER}
      SENTRY_DB_PASSWORD: ${POSTGRES_PASSWORD}
      SENTRY_DB_NAME: ${POSTGRES_DB}
      SENTRY_REDIS_HOST: redis
      SENTRY_REDIS_PORT: "6379"
      SENTRY_KAFKA_BROKERS: kafka:9092
      SENTRY_SNUBA: http://snuba-api:1218
    command: ["upgrade", "--noinput"]

  # ---------- One shot: create the first superuser ----------
  sentry-createuser:
    image: getsentry/sentry:latest
    restart: "no"
    depends_on:
      sentry-upgrade:
        condition: service_completed_successfully
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_POSTGRES_PORT: "5432"
      SENTRY_DB_USER: ${POSTGRES_USER}
      SENTRY_DB_PASSWORD: ${POSTGRES_PASSWORD}
      SENTRY_DB_NAME: ${POSTGRES_DB}
      SENTRY_REDIS_HOST: redis
      SENTRY_REDIS_PORT: "6379"
    command:
      - "createuser"
      - "--email"
      - "${SENTRY_ADMIN_EMAIL}"
      - "--password"
      - "${SENTRY_ADMIN_PASSWORD}"
      - "--superuser"
      - "--no-input"

  # ---------- Sentry web ----------
  web:
    image: getsentry/sentry:latest
    depends_on:
      sentry-createuser:
        condition: service_completed_successfully
      symbolicator:
        condition: service_started
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_SINGLE_ORGANIZATION: ${SENTRY_SINGLE_ORGANIZATION}
      SENTRY_USE_BIG_INTS: "1"
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_POSTGRES_PORT: "5432"
      SENTRY_DB_USER: ${POSTGRES_USER}
      SENTRY_DB_PASSWORD: ${POSTGRES_PASSWORD}
      SENTRY_DB_NAME: ${POSTGRES_DB}
      SENTRY_REDIS_HOST: redis
      SENTRY_REDIS_PORT: "6379"
      SENTRY_KAFKA_BROKERS: kafka:9092
      SENTRY_SNUBA: http://snuba-api:1218
      SENTRY_SYMBOLICATOR_ENABLED: "true"
      SENTRY_SYMBOLICATOR_URL: http://symbolicator:3021
      # SMTP… optional
      SENTRY_EMAIL_HOST: ${SENTRY_EMAIL_HOST}
      SENTRY_EMAIL_PORT: ${SENTRY_EMAIL_PORT}
      SENTRY_EMAIL_USER: ${SENTRY_EMAIL_USER}
      SENTRY_EMAIL_PASSWORD: ${SENTRY_EMAIL_PASSWORD}
      SENTRY_SERVER_EMAIL: ${SENTRY_SERVER_EMAIL}
      SENTRY_EMAIL_USE_TLS: ${SENTRY_EMAIL_USE_TLS}
    ports:
      - "9000:9000"
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:9000/_health/"]
      interval: 10s
      timeout: 5s
      retries: 40

  worker:
    image: getsentry/sentry:latest
    depends_on:
      web:
        condition: service_started
    command: ["run", "worker"]
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: ${POSTGRES_USER}
      SENTRY_DB_PASSWORD: ${POSTGRES_PASSWORD}
      SENTRY_DB_NAME: ${POSTGRES_DB}
      SENTRY_REDIS_HOST: redis
      SENTRY_KAFKA_BROKERS: kafka:9092
      SENTRY_SNUBA: http://snuba-api:1218

  cron:
    image: getsentry/sentry:latest
    depends_on:
      web:
        condition: service_started
    command: ["run", "cron"]
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: ${POSTGRES_USER}
      SENTRY_DB_PASSWORD: ${POSTGRES_PASSWORD}
      SENTRY_DB_NAME: ${POSTGRES_DB}
      SENTRY_REDIS_HOST: redis
      SENTRY_KAFKA_BROKERS: kafka:9092
      SENTRY_SNUBA: http://snuba-api:1218

  # Keep Kafka moving… minimal set
  ingest-events:
    image: getsentry/sentry:latest
    depends_on:
      web:
        condition: service_started
    command: ["run", "consumer", "ingest-events", "--all-consumer-types"]
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_KAFKA_BROKERS: kafka:9092
      SENTRY_REDIS_HOST: redis
      SENTRY_SNUBA: http://snuba-api:1218

  post-process-forwarder:
    image: getsentry/sentry:latest
    depends_on:
      web:
        condition: service_started
    command: ["run", "post-process-forwarder", "--log-level=INFO", "--commit-batch-size", "1"]
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_KAFKA_BROKERS: kafka:9092
      SENTRY_REDIS_HOST: redis
      SENTRY_SNUBA: http://snuba-api:1218

volumes:
  postgres:
  redis:
  clickhouse:
  kafka:
  symbolicator:
